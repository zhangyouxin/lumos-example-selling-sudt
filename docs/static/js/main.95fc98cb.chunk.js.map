{"version":3,"sources":["apis/mock.ts","selling-lock/SellingLockList.tsx","selling-lock/SellCells.tsx","selling-lock/App.tsx","reportWebVitals.ts","index.tsx"],"names":["SUDT","SCRIPTS","sell","_options","privKey","a","buy","response","seller","sudt","code_hash","CODE_HASH","hash_type","HASH_TYPE","args","amount","sellPrice","selling","tx_hash","index","Promise","resolve","config","require","SellingLockList","props","useState","list","setList","message","setMessage","useEffect","retrieveSellingLocks","listSelling","then","items","buyCell","item","buyer","generateSecp256k1Blake160Address","buyOptions","hash","className","value","onChange","e","setPrivKey","target","onClick","style","minHeight","map","BigInt","toString","console","log","initialSellForm","sellerPrivKey","sudtCodeHash","SellCells","form","setForm","sellCell","options","txHash","formItemClass","type","App","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95fc98cb.chunk.js","sourcesContent":["import { HashType } from '@ckb-lumos/base';\nimport { HexString } from '@ckb-lumos/base';\nimport { SellOptions, BuyOptions, ListSellingResponse } from '../selling-lock.d'\n\nimport { SCRIPTS } from '../config.json';\nconst { SUDT } = SCRIPTS;\n\nexport async function sell(_options: SellOptions, privKey: HexString) {\n  return \"0x12345\"\n}\n\nexport async function buy(_options: BuyOptions, privKey: HexString) {\n  return \"0x12345\"\n}\n\nexport async function listSelling(): Promise<ListSellingResponse[]> {\n  const response: ListSellingResponse[] = [{\n    seller: 'ckt1qyqxn59qn8xx4zd8p6mu4xtf4lz94zf2vfwsjaffax',\n    sudt: {\n      code_hash: SUDT.CODE_HASH,\n      hash_type: SUDT.HASH_TYPE as HashType,\n      args: \"0x\"\n    },\n    amount: \"0x02\",\n    sellPrice: \"0x01\",\n    selling: {\n      tx_hash: \"b0d883a7ad457324396dd68befba5cd8af5b8722f1f6b0a7cd8347bafaff1956\",\n      index: \"0x00\"\n    }\n  }]\n  return Promise.resolve(response)\n}\n","import React, { useEffect, useState } from \"react\";\nimport { ListSellingResponse } from \"../selling-lock\";\nimport { listSelling, buy } from \"../apis/mock\";\nimport { BuyOptions } from \"../selling-lock.d\";\nimport { generateSecp256k1Blake160Address } from \"@ckb-lumos/helpers\"\nconst config = require(\"../config.json\");\nconsole.log(config)\n\nexport default function SellingLockList(props:{ privKey: string, setPrivKey: any }) {\n  const [list, setList] = useState<ListSellingResponse[]>([]);\n  const [message, setMessage] = useState<string>('');\n\n  useEffect(() => {\n    retrieveSellingLocks();\n  }, []);\n\n  const retrieveSellingLocks = () => {\n    listSelling().then((items: ListSellingResponse[]) => {\n      setList(items);\n    });\n  };\n\n  const buyCell = async (item: ListSellingResponse) => {\n    if(!props.privKey){\n      setMessage(\"Please fill in buyer privKey first.\");\n    } else {\n      const buyer = generateSecp256k1Blake160Address(props.privKey, {config});\n      const buyOptions: BuyOptions = {\n        selling: item.selling,\n        sellPrice: item.sellPrice,\n        buyer\n      }\n      let hash = await buy(buyOptions, props.privKey);\n      setMessage(`Buy success! buyer is ${buyer}, tx hash is: ${hash}`);\n    }\n  }\n\n  return (\n    <div className=\"\">\n      <p className=\"h-16 text-3xl flex flex-row justify-center text-gray-200 items-center bg-green-900 bg-opacity-90\">\n        List Selling Locks\n      </p>\n      <div className=\"bg-green-900 bg-opacity-90 p-2\">\n          buyer private key: <input className=\"inline-block w-96 bg-gray-900 bg-opacity-40 text-gray-300\" value={props.privKey} onChange={(e) => props.setPrivKey(e.target.value)}/>\n        <button className=\"ml-4 button hover:bg-gray-700 hover:text-gray-200 border-2 border-solid border-gray-800 px-2 rounded-md mt-2\" onClick={(() => retrieveSellingLocks() ) as any}> 刷新 </button>\n      </div>\n      <div className=\"flex flex-row flex-wrap justify-between bg-green-700 bg-opacity-90\" style={{ minHeight: '12rem'}}>\n        {list.map((item: ListSellingResponse, index: number) => {\n          return <div className=\"h-48 w-132 m-8 rounded-md shadow-lg border-2 border-solid border-gray-800 p-4\" key={index}>\n            <div className=\"name\">卖家：{item.seller}</div>\n            <div className=\"truncate\">sudt：{item.sudt.code_hash}</div>\n            <div className=\"price\">价格：{BigInt(item.sellPrice).toString()}</div>\n            <div className=\"amount\">数量：{BigInt(item.amount).toString()}</div>\n            <button className=\"button hover:bg-gray-700 hover:text-gray-200 border-2 border-solid border-gray-800 px-2 rounded-md mt-2\" onClick={(() => buyCell(item) ) as any}> 购买 </button>\n            <span className=\"ml-2\">{message}</span>\n          </div>;\n        })}\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { sell } from \"../apis/mock\";\nimport { SellOptions } from \"../selling-lock\";\nimport { generateSecp256k1Blake160Address } from \"@ckb-lumos/helpers\"\nconst config = require(\"../config.json\");\n\ninterface SellForm {\n  sellerPrivKey: string;\n  sudtCodeHash: string;\n  amount: number;\n  sellPrice: number;\n}\n\nconst initialSellForm: SellForm = {\n  sellerPrivKey: \"\",\n  sudtCodeHash: \"\",\n  amount: 0,\n  sellPrice: 0\n}\n\nexport default function SellCells() {\n  const [form, setForm] = useState<SellForm>(initialSellForm);\n  const [message, setMessage] = useState<string>('');\n\n  const sellCell = async () => {\n    if(form.sellerPrivKey && form.sudtCodeHash && form.amount && form.sellPrice){\n      let options: SellOptions = {\n        seller: generateSecp256k1Blake160Address(form.sellerPrivKey, {config}),\n        sudt: {\n          code_hash: form.sudtCodeHash,\n          hash_type: \"type\",\n          args: \"0x\"\n        },\n        amount: `0x${BigInt(form.amount).toString(16)}`,\n        sellPrice: `0x${BigInt(form.sellPrice).toString(16)}`\n      }\n      let txHash = await sell(options, form.sellerPrivKey);\n      setMessage(`Sell Success, tx hash is: ${txHash}`)\n    } else {\n      setMessage('Please fill in all fields')\n    }\n  };\n\n  const formItemClass = \"mb-2 bg-green-700 bg-opacity-90 h-16 rounded-md shadow-lg border-2 border-solid border-gray-800 p-4\"\n  return (\n    <div className=\"\">\n      <p className=\"mt-8 h-16 text-3xl flex flex-row justify-center text-gray-200 items-center bg-green-900 bg-opacity-90\">\n        Selling Your USDT\n      </p>\n      <div className=\"bg-green-700 bg-opacity-90 p-8\">\n        <div className={formItemClass}>\n          private key: <input className=\"inline-block w-10/12 bg-gray-900 bg-opacity-40 text-gray-300\" value={form.sellerPrivKey} onChange={(e) => setForm({...form, sellerPrivKey: e.target.value})}/>\n        </div>\n        <div className={formItemClass}>\n          code hash: <input className=\"inline-block w-10/12 bg-gray-900 bg-opacity-40 text-gray-300\" value={form.sudtCodeHash} onChange={(e) => setForm({...form, sudtCodeHash: e.target.value})}/>\n        </div>\n        <div className={formItemClass}>\n         sell amount: <input type=\"number\" className=\"inline-block w-10/12 bg-gray-900 bg-opacity-40 text-gray-300\" value={form.amount} onChange={(e) => setForm({...form, amount: e.target.value as any})}/>\n        </div>\n        <div className={formItemClass}>\n          sell price: <input type=\"number\" className=\"inline-block w-10/12 bg-gray-900 bg-opacity-40 text-gray-300\" value={form.sellPrice} onChange={(e) => setForm({...form, sellPrice: e.target.value as any})}/>\n        </div>\n        <div className=\"mb-2 h-1 p-4\">\n          <button className=\"button hover:bg-gray-700 hover:text-gray-200 border-2 border-solid border-gray-800 px-2 rounded-md mt-2\" onClick={(() => sellCell() ) as any}> 购买 </button>\n          <span className=\"ml-2\">{message}</span>\n        </div>\n      </div>\n     \n         \n      {/* <div className=\"flex flex-row flex-wrap justify-between bg-green-700 bg-opacity-90\">\n        {list.map((item: ListSellingResponse, index: number) => {\n          return <div className=\"h-48 w-132 m-8 rounded-md shadow-lg border-2 border-solid border-gray-800 p-4\" key={index}>\n            <div className=\"name\">卖家：{item.seller}</div>\n            <div className=\"truncate\">sudt：{item.sudt.code_hash}</div>\n            <div className=\"price\">价格：{item.sellPrice}</div>\n            <div className=\"amount\">数量：{item.amount}</div>\n            <button className=\"button hover:bg-gray-700 hover:text-gray-200 border-2 border-solid border-gray-800 px-2 rounded-md mt-2\" onClick={(() => buyCell(item) ) as any}> 购买 </button>\n            <span className=\"ml-2\">{message}</span>\n          </div>;\n        })}\n      </div> */}\n    </div>\n  );\n}\n","import React from 'react';\nimport SellingLockList from './SellingLockList';\nimport SellCells from './SellCells';\n\nfunction App() {\n  const [privKey, setPrivKey] = React.useState<string>('0xb12c5d587aef846f2e6031d5c73d169db7e434441cfd11c185207d6b8b71aabb');\n\n  return (\n    <div className=\"min-h-screen bg-gray-700 bg-opacity-0.9\">\n      <header className=\"h-16 text-3xl flex flex-row justify-center text-gray-200 items-center bg-gray-500\">\n        Selling Lock Demo\n      </header>\n      <div className=\"m-4 p-4 flex flex-row\">\n        <div className=\"flex-grow\">\n          <SellingLockList  privKey={privKey} setPrivKey={setPrivKey} />\n          <SellCells />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './selling-lock/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}